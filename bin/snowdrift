#! /usr/bin/python3

import argparse
import logging
import sys
import snowdrift
logging.basicConfig(format='%(asctime)s:%(levelname)s:%(message)s', level=logging.INFO)

# Setup and parse program arguments
parser = argparse.ArgumentParser()
parser.add_argument('forecast_files', nargs='+')
parser.add_argument('--out', metavar='FILENAME', help="save result to file(s)", default=None)
parser.add_argument('--format', help="output format ['GRIB' (default) | 'PNG']", default="GRIB")
parser.add_argument('--show', metavar='STEP', help="show snow drift result at STEP [-1 (default / last step)]", default=None)
args = parser.parse_args()

# Target forecast dataset...
files = args.forecast_files

# Load input fc parameter data,
#  - pass input data config here
inputData, templateMsg = snowdrift.collectData(files)

# Run snowdrift calculation on dataset,
data = snowdrift.snowdrift(inputData)

# save,
if args.out:
    filen = args.out
    # save as images...
    if args.format.lower() == 'png':
        logging.info("writing PNG images to %r"%(filen+"*"))
        n = len(data['drift']['times'])
        for step in range(n):
            snowdrift.plot(data, step, 'snowage', save=filen)
            snowdrift.plot(data, step, 'driftacc', save=filen)
            snowdrift.plot(data, step, 'mobility', save=filen)
            snowdrift.plot(data, step, 'drift', save=filen)
    elif args.format.lower() == 'grib':
        logging.info("writing snowdrift parameters to GRIB %r"%(filen+"*"))
        snowdrift.save_grib(data, filen, templateMsg)
    else:
        logging.error("unknown output format %r"%args.format)
        sys.exit(1)

# Test plot the results at step
if args.show:
    step = int(args.show)
    snowdrift.plot(data, step, 'snowage')
    snowdrift.plot(data, step, 'driftacc')
    snowdrift.plot(data, step, 'mobility')
    snowdrift.plot(data, step, 'drift')